// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4ek7yevYSmZU9MaEHzjjyJ
// Component: LXjBXx0xs4DF
import * as React from "react";
import Link from "next/link";
import { useRouter } from "next/router";
import {
  PlasmicLink as PlasmicLink__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import Button from "../../Button"; // plasmic-import: pYhfWVlbz6rK/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 4ek7yevYSmZU9MaEHzjjyJ/projectcss
import sty from "./PlasmicHomeSection.module.css"; // plasmic-import: LXjBXx0xs4DF/css

createPlasmicElementProxy;

export const PlasmicHomeSection__VariantProps = new Array();

export const PlasmicHomeSection__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomeSection__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  return (
    <section
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__tRn8P)}>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___6MtVg)}
        >
          <h1
            className={classNames(
              projectcss.all,
              projectcss.h1,
              projectcss.__wab_text,
              sty.h1__js8Bt
            )}
          >
            {"Halcyon Studios"}
          </h1>
          <h1
            className={classNames(
              projectcss.all,
              projectcss.h1,
              projectcss.__wab_text,
              sty.h1___4ANgA
            )}
          >
            {"Find Tranquility in Motion"}
          </h1>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__ykXpP
            )}
          >
            {"New Memberships Available Including Reformer Pilates"}
          </div>
          <div className={classNames(projectcss.all, sty.freeBox___4DSn5)}>
            <Button
              data-plasmic-name={"membershipsButton"}
              data-plasmic-override={overrides.membershipsButton}
              className={classNames("__wab_instance", sty.membershipsButton)}
              color={"green"}
              size={"minimal"}
              submitsForm={false}
            >
              <PlasmicLink__
                data-plasmic-name={"link"}
                data-plasmic-override={overrides.link}
                className={classNames(projectcss.all, projectcss.a, sty.link)}
                component={Link}
                href={`/memberships`}
                platform={"nextjs"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jxuNt
                  )}
                >
                  {"See Memberships"}
                </div>
              </PlasmicLink__>
            </Button>
          </div>
        </Stack__>
      </div>
    </section>
  );
}

const PlasmicDescendants = {
  root: ["root", "membershipsButton", "link"],
  membershipsButton: ["membershipsButton", "link"],
  link: ["link"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomeSection__ArgProps,
          internalVariantPropNames: PlasmicHomeSection__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomeSection__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomeSection";
  } else {
    func.displayName = `PlasmicHomeSection.${nodeName}`;
  }
  return func;
}

export const PlasmicHomeSection = Object.assign(
  // Top-level PlasmicHomeSection renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    membershipsButton: makeNodeComponent("membershipsButton"),
    link: makeNodeComponent("link"),
    // Metadata about props expected for PlasmicHomeSection
    internalVariantProps: PlasmicHomeSection__VariantProps,
    internalArgProps: PlasmicHomeSection__ArgProps
  }
);

export default PlasmicHomeSection;
/* prettier-ignore-end */
